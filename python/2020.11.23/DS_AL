자료구조 : linked list, stack, queue.

Array for List
리스트는 왜 필요해?
구조화된 형태로 쉽게 무언가를 찾기 위해

ADT(Abstract Data Types)
 데이터 집합 + 데이터 위의 작동들 집합
 추상 자료형내부의 데이터에 접근할 수 없지만 사용할 수는 있다.
 데이터의 저장과 상관없이 사용가능 하다.

array: 인덱스를 활용하여 동일한 데이터를 저장,접근할수있는것. 

x=y를 선언하면 x는 더 이상 기존의 x가 아니고 새로운 x가 된다.
y의 레퍼런스를 참조받은 x가 된다.

retrieval : 검색

array는 선형적인 1차원 공간에 요소를 대입하기 때문에 규모가 큰 array에서 중간에 요소를
input하가 어려울 수 있다.
마법처럼 공간을 창출할 수는 없을까?
linked list를 통해서 창출할 수 있다!!

노드를 통해 요소 사이사이에 다른 요소들의 위치를 변경하지 않고 공간을 만들어 낼 수 있다.
노드란?
- 다음 노드가 무엇인가에 대한 레퍼런스를 저장하는 변수
- 어떤값이 저장될 것인지 그 밸류를 저장하는 래퍼런스를 저장하는 변수
스페셜 노드들
헤더: 리스트의 맨 처음노드
테일: 리스트의 맨 마지막노드

노드를 UML로 나타내면 association relationship이 있는데(1 to 1),
하나의 노드는 하나의 넥스트 노드만 가질 수 있다.

노드를 사용하면
 index를 쓸 수 없다 -> node안에 next를 사용하여 index와 같은 행위 가능.
  
linked list에 데이터를 넣는방법.
1. 어디에 데이터를 넣을건지 정한다.
2. Nodeprev의 next를 Nodenew의 next로 바꾼다.
3. Nodeprev의 next를 Nodenext의 next로 바꾼다.

linked list에 데이터를 삭제하는방법.
1. Nodeprev의 next를 Noderemove에 노드에서 끊는다.
2. Nodeprev의 next를 Nodenext의 next로 바꾼다.

#####################Stack##########################
LIFO(last in first out)
linked list가 모든 공간에 대해 왔다갔다 할 수 있다면 
Stack은 오로지 top instance에 대해서만 관여한다.

- push
- pop

'''
클래스는 집의 설계도.
오브젝트는 설계도로 지은 모든집.
인스턴스는 주어진 집.
객체는 클래스의 인스턴스도 될 수 있다.
'''

#####################Queue###########################
FIFO(first in first out)
Queue도 Stack과 마찬가지로 중간에는 들어갈 수 없다.

-Enqueue : list의 insert(뒤에 넣음) 리스트의 사이즈를 알아야 이 동작을 수행할 수 있다.
-Dequeue : list의 remove(앞에서 뺌)