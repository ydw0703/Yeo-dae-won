# __init__(self,variable) 을 Constructor라고 부름.(생성자)
Constructor란 instantiated 될때 call 되는것.
하나의 인스턴스를 만드는 시점에 Constructor가 call된다.
Constructor의 self값은 존재하지 않게된다.

del instance 이면 클래스를 통해 생성된 인스턴스를 삭제한다.
__del__을 Destructor라고 부름.(소멸자)
Deconstructor는 파일,통신시스템을 쓰고 있는 상황 등 안전한 프로그래밍을 위해 
사용되기도 한다.


한 파일에 한 클래스를 넣는 것이 가독성도 좋고 효율적일 수 있다.

필드(=전역변수=멤버변수=Attribute) : 클래스 내부, 생성자/메소드 외부 
지역변수 : 클래스 내부, 생성자/메소드 내부

from package명(디렉토리, 폴더) import 파일명 
'import 함수명' 이 아니다!
package명은 파일들을 모아놓은 디렉토리(폴더)명이다.

인스턴스 = 클래스() 와 같은 형식.
인스턴스.클래스 내부 함수(함수안에 파라미터)
# 파일명.클래스.클래스 내부 함수() 이렇게 사용하지는 않는다.

좋은 소프트웨어라는 것의 기준은 어떻게 될까?
1. 클라이언트의 목적, 개발목적과 맞는다. 에러없이
2. 예상되는 에러나 과중한 입력에 대한 유연한 결과 출력
3. 유연한 유지.보수
4. 사용자들이 잘 학습할 수 있도록 만들어야한다. 다른 환경 다른 목적으로도 쓰일 수 있어야 한다.
5. 빠른 실행, 개발자들도 쉽게 구현할 수 있는 소프트웨어

object-Oriented Design은 현실에서의 개념을 프로그램의 모듈로서 잘 설계하는것.

Ex)
고객 
콘셉의 이름 정하기(Customer)
콘셉의 특성 정하기(ID,AccountNum)
고객이 할 수 있는 행동(동적속성 등)(+login(),requestWithdrawall())

거래
(Transaction)
(amount,RealeaseATMID)
(+releaseMoney())

추상화란? - 현실의 추상적 개념을 간단한 알고리즘이나 실체가 있도록 구현한 것.

Class는 수많은 설계도 중 하나의 설계도이다. 



