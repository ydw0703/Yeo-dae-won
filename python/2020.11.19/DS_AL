__val1 : var1은 굳이 안봤으면 좋겠다는 뜻에서 만들어놓은 모형
inheritance(상속) : class를 활용한 개념
attribute: 특성, 속성

class Child(Father,Mother):
    strName = "Moon"
    def __init__(self,ParamName,ParamHome):
        super(Child,self)#Father.__init__(ParamName)#Father의 생성자
        self.strName = ParamHome
        print "child is created"
    def doRunning(self):
        print("Fast")

super은 자신의 부모클래스를 상속받는 것.

Polymorphism
Poly = Many, Morph = Shape
다양한 모양을 뜻한다.
유사한 signature에 다른 행동
signature = Method name + Parameter list(메소드가 어떤 것인지 알아내는 구분자)

abstract method를 포함하는 것이 abstract class
abstract method는 method signatrue까지만 정해주는 것. 

오버로딩(Overloading) : 메소드의 중복정의, 인스턴스 객체끼리 서로 연산을 할 수 있게끔 기존에 있는 연산자의 기능을 중복으로 정의하는 것.
ex) __add__,__cmp__ 등
오버라이딩(Overriding) : 메소드의 재정의, 상위 클래스가 가지고 있는 메소드를 하위 클래스가 재정의 해서 사용한다.

__eq__: 동등한지의 히든 메서드
__cmp__: 비교의 히든 메서드
__add__: 추가하는 것의 히든 메서드

use-case diagram
class diagram
state diagram
Deployment diagram

aggregation
Dependency
 